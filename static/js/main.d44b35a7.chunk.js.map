{"version":3,"sources":["reducer.js","Context.js","App.js","serviceWorker.js","index.js"],"names":["state","action","type","error","loading","searchResult","video","payload","initialState","category","hide","MyContext","React","createContext","Context","props","useReducer","Reducer","dispatch","Provider","value","data","children","Login","lazy","Home","ProfileData","App","fallback","className","role","exact","path","component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.d44b35a7.chunk.js","sourcesContent":["\nexport default (state, action) => {\n  switch(action.type){\n    case 'PLAY_VIDEO': \n      return {\n        ...state,\n        error: '',\n        loading: false,\n        searchResult: [],\n        video: action.payload,\n      }\n    case 'REMOVE_VIDEO':\n      return{\n        ...state,\n        error: '',\n        loading: false,\n        searchResult: [],\n        video: '',\n      }\n    case 'SEARCH_VIDEOS':\n      return {\n        ...state,\n        searchResult: action.payload,\n        loading: false,\n        video: '',\n        error: '',\n      }\n    case 'ERROR':\n      return{\n        ...state,\n        loading: false,\n        video: '',\n        searchResult: [],\n        error: action.payload\n      }\n    default: \n      return state\n  }\n}\n","import React, { useReducer } from 'react';\nimport Reducer from './reducer';\n\nconst initialState = {\n  video: {},\n  error: '',\n  loading: true,\n  category: ['web3', 'web development', 'machine learning', 'nft', 'gaming'],\n  searchResult: [],\n  hide: false,\n};\n\nexport const MyContext = React.createContext(initialState);\n\nfunction Context(props) {\n\n  const [state, dispatch] = useReducer(Reducer, initialState);\n\n  return (\n    <MyContext.Provider value={{ data: state, dispatch }}>\n      {\n        props.children\n      }\n    </MyContext.Provider>\n  )\n}\n\nexport default Context\n","import React, { Suspense } from 'react';\nimport { Switch, BrowserRouter as Router, Route } from 'react-router-dom';\nimport Context from './Context';\n\nconst Login = React.lazy(() => import('./components/Login'));\nconst Error = React.lazy(() => import('./components/Error'));\nconst Home = React.lazy(() => import('./components/Home'));\nconst ProfileData = React.lazy(() => import('./components/ProfileData'));\n\n\nfunction App() {\n  return (\n    <Router>\n      <Suspense fallback={\n      <div className=\"vw-100 vh-100 d-flex justify-content-center align-items-center\">\n        <div className=\"spinner-border text-light\" role=\"status\">\n            <span className=\"sr-only\">Loading...</span>\n         </div>\n      </div>\n      }>\n        <Context>\n          <Switch>\n            <Route exact path=\"/\" component={Login} />\n            <Route exact path=\"/home\" component={Home} />\n            <Route exact path=\"/profile/:query\" component={ProfileData} />\n            <Route path=\"*\" component={Home} />\n          </Switch>\n        </Context>\n      </Suspense>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n\n"],"sourceRoot":""}